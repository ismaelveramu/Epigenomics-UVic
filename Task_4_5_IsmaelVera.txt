# Ismael Vera Mu–oz
# Epigenomics - UVic
# Tasks 4 & 5

# # # # # # # # # # # #
# Task: 4. EN-TEx ATAC-seq data: downstream analyses

# QUESTION 1
# 1- Move to folder ATAC-seq, and create folders to store bigBed data files and peaks analyses files. Make sure the files are organized in a consistent way as done for ChIP-seq.
Ê
# Run the following docker container
sudo docker run -v $PWD:$PWD -w $PWD --rm -it dgarrimar/epigenomics_course
Ê
# Create ATAC-seq folder 
mkdir ATAC-seq
cd ATAC-seq
Ê
# Create folders to store bigBed data files and peaks analyses files
mkdir analyses
mkdir data
mkdir data/bigBed.files


# QUESTION 2
# 2- Retrieve from a newly generated metadata file ATAC-seq peaks (bigBed narrow, pseudoreplicated peaks, assembly GRCh38) for stomach and sigmoid_colon for the same donor used in the previous sections.
Ê
# Download metadata
../bin/download.metadata.sh https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&assay_slims=DNA+accessibility&biosample_ontology.term_name=stomach&biosample_ontology.term_name=sigmoid+colon&assay_title=ATAC-seq&type=Experiment
Ê
# Retrieve bigBed narrow, pseudoreplicated peaks, assembly GRCh38
grep -F "bigBed_narrowPeak" metadata.tsv |\
ÊÊÊÊÊÊÊÊÊÊÊ grep -F "pseudoreplicated_peaks" |\
ÊÊÊÊÊÊÊÊÊÊÊ grep -F "GRCh38" |\
ÊÊÊÊÊÊÊÊÊÊÊ awk 'BEGIN{FS=OFS="\t"}{print $1, $11}' |\
ÊÊÊÊÊÊÊÊÊÊÊ sort -k2,2 -k1,1r |\
ÊÊÊÊÊÊÊÊÊÊÊ sort -k2,2 -u > analyses/bigBed.peaks.ids.txt
Ê
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
Ê wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done
Ê
# Check that the md5sum values coincide with the ones provided by ENCODE
Ê
for file_type in bigBed; do
Ê
Ê # retrieve original MD5 hash from the metadata
Ê ../bin/selectRows.sh <(cut -f1 analyses/"$file_type".*.ids.txt) metadata.tsv | cut -f1,46 > data/"$file_type".files/md5sum.txt
Ê
Ê # compute MD5 hash on the downloaded files 
Ê cat data/"$file_type".files/md5sum.txt |\
Ê while read filename original_md5sum; do 
ÊÊÊ md5sum data/"$file_type".files/"$filename"."$file_type" |\
ÊÊÊ awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
Ê done > tmp 
Ê mv tmp data/"$file_type".files/md5sum.txt
Ê
Ê # make sure there are no files for which original and computed MD5 hashes differ
Ê awk '$2!=$3' data/"$file_type".files/md5sum.txt
Ê
done
Ê
# It appears no result, meaning there are no differences.
Ê

# QUESTION 3
# 3- For each tissue, run an intersection analysis using BEDTools: report 1) the number of peaks that intersect promoter regions, 2) the number of peaks that fall outside gene coordinates (whole gene body, not just the promoter regions).
Ê
# Download from the link the list of promoters ([-2 kb, +2 Kb] from TSS) of protein-coding genes, and store them in the annotation folder.
mkdir annotation
cd annotation
wget https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/gencode.v24.protein.coding.non.redundant.TSS.bed 
Ê
Ê
# Convert bigBed files to BED files
mkdir data/bed.files
Ê
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
Ê bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done
Ê
# 1) the number of peaks that intersect promoter regions
# Create folder for the analysis peeks 
mkdir analyses/peaks.analysis
Ê
# Retrieve genes with peaks at the promoter region in each tissue
cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do 
Ê bedtools intersect -a data/bed.files/"$filename".bed -b annotation/gencode.v24.protein.coding.non.redundant.TSS.bed -u |\
Ê sort -u > analyses/peaks.analysis/ATACpeaks.within.promoters."$tissue".txt
done
Ê
# Count the number of peeks
wc -l analyses/peaks.analysis/*.txt
Ê
# Sigmoid colon: 47871
# Stomach: 44749
Ê
Ê
# 2) the number of peaks that fall outside gene coordinates
# First, it is necessary to download the gencode.v24.primary_assembly.annotation file, and keep it in the annotation folder
Ê
wget -P annotation https://www.encodeproject.org/files/gencode.v24.primary_assembly.annotation/@@download/gencode.v24.primary_assembly.annotation.gtf.gz
Ê
# Uncompress the file
gunzip annotation/gencode.v24.primary_assembly.annotation.gtf.gz
Ê
# Convert the gtf annotation file to a BED format
awk '$3=="gene"' annotation/gencode.v24.primary_assembly.annotation.gtf |\
grep -F "protein_coding" |\
cut -d ";" -f1 |\
awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' |\
sed 's/\"//g' |\
awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2-1); print $0}' > annotation/gencode.v24.protein.coding.gene.body.bed
Ê
# Get the peaks that fall outside gene coordinates
cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do 
ÊÊÊÊÊÊÊÊÊÊÊ bedtools intersect -a data/bed.files/"$filename".bed -b annotation/gencode.v24.protein.coding.gene.body.bed -v |\
ÊÊÊÊÊÊÊÊÊÊÊ sort -u > analyses/peaks.analysis/ATACpeaks.outside.gene."$tissue".bed
done
Ê
# Count the number of peeks
wc -l analyses/peaks.analysis/*.bed
Ê
# Sigmoid colon: 37035
# Stomach: 34537
Ê
Ê
Ê

# # # # # # # # # # # # # # # # # # # # #
# Task 5: Distal regulatory activity
Ê

# QUESTION 1
# 5.1- Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.
mkdir regulatory_elements
cd regulatory_elements
mkdir analyses
mkdir data
mkdir data/bed.files
mkdir data/bigBed.files
Ê

Ê
# QUESTION 2
# 5.2- Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they?
Ê
# Download data from encode
../bin/download.metadata.shÊ "https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&biosample_ontology.term_name=sigmoid+colon&biosample_ontology.term_name=stomach&target.label=H3K27ac&target.label=H3K4me1&type=Experiment" 
Ê
# Extract bigBed narrow, pseudoreplicated peaks, assembly GRCh38 of H3K27ac and store it in a txt file (bigBed.peaks.ids.txt)
grep -F H3K27ac metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u > analyses/bigBed.peaks.ids.txt
Ê
# Extract bigBed narrow, pseudoreplicated peaks, assembly GRCh38 of H3K4me1 and add them to the previous txt file (bigBed.peaks.ids.txt)
grep -F H3K4me1 metadata.tsv |\
grep -F "bigBed_narrowPeak" |\
grep -F "pseudoreplicated_peaks" |\
grep -F "GRCh38" |\
awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\
sort -k2,2 -k1,1r |\
sort -k2,2 -u >> analyses/bigBed.peaks.ids.txt
Ê
# Download bigBed of the encode codes in bigBed.peaks.ids.txt
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
Ê wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done
Ê
Ê
# Check the integrity of the downloaded files:
for file_type in bigBed; do
Ê
Ê # retrieve original MD5 hash from the metadata
Ê ../bin/selectRows.sh <(cut -f1 analyses/"$file_type".*.ids.txt) metadata.tsv | cut -f1,46 > data/"$file_type".files/md5sum.txt
Ê
Ê # compute MD5 hash on the downloaded files 
Ê cat data/"$file_type".files/md5sum.txt |\
Ê while read filename original_md5sum; do 
ÊÊÊ md5sum data/"$file_type".files/"$filename"."$file_type" |\
ÊÊÊ awk -v filename="$filename" -v original_md5sum="$original_md5sum" 'BEGIN{FS=" "; OFS="\t"}{print filename, original_md5sum, $1}' 
Ê done > tmp 
Ê mv tmp data/"$file_type".files/md5sum.txt
Ê
Ê # make sure there are no files for which original and computed MD5 hashes differ
Ê awk '$2!=$3' data/"$file_type".files/md5sum.txt
Ê
done
Ê
# It appears no result, meaning there are no differences.
Ê
# Convert bigBed files to BED files with ÒbigBedToBedÓ 
cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
Ê bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done
Ê
# Intersection
# Bearing in mind the names of the bed files and the corresponding tissue:
#ENCFF872UHNÊÊÊÊÊÊÊÊ sigmoid_colonÊÊÊÊÊÊÊÊÊÊÊ - H3K27ac-human
#ENCFF977LBDÊÊÊÊÊÊÊÊÊÊ stomachÊÊÊÊÊÊÊÊÊ - H3K27ac-human
#ENCFF724ZOFÊÊÊÊÊÊÊÊÊÊ sigmoid_colon - H3K4me1-human
#ENCFF844XRNÊÊÊÊÊÊÊÊÊ stomachÊÊÊÊÊÊÊÊÊ - H3K4me1-human
Ê
# Sigmoid colon intersection 
bedtools intersectÊ -aÊ ../ATAC-seq/analyses/peaks.analysis/ATACpeaks.outside.gene.sigmoid_colon.bed -b data/bed.files/ENCFF872UHN.bed -u | bedtools intersect -a stdin -b data/bed.files/ENCFF724ZOF.bed -u | wc -l 
# Result: 14215
Ê
# Stomach intersection
bedtools intersectÊ -aÊ ../ATAC-seq/analyses/peaks.analysis/ATACpeaks.outside.gene.stomach.bed -b data/bed.files/ENCFF977LBD.bed -u | bedtools intersect -a stdin -b data/bed.files/ENCFF844XRN.bed -u | wc -l
Ê
# Result: 8022
Ê
Ê

# QUESTION 3
# 5.3- Focus on regulatory elements that are located on chromosome 1, and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region.
Ê
# From the previous intersection, select the regulatory elements of chromosome 1 and create the file.
Ê
# Sigmoid colon
bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/ATACpeaks.outside.gene.sigmoid_colon.bed -b data/bed.files/ENCFF872UHN.bed -u | bedtools intersect -a stdin -b data/bed.files/ENCFF724ZOF.bed -u | grep -w chr1 | awk '{print $4 "\t" $2}' > sigmoid_colon.regulatory.elements.starts.tsv
Ê
# Count the number of sigmoid colon regulatory regions 
wc -l sigmoid_colon.regulatory.elements.starts.tsv
# 1521
Ê
# Stomach
bedtools intersect -a ../ATAC-seq/analyses/peaks.analysis/ATACpeaks.outside.gene.sigmoid_colon.bed -b data/bed.files/ENCFF977LBD.bed -u | bedtools intersect -a stdin -b data/bed.files/ENCFF844XRN.bed -u | grep -w chr1 | awk '{print $4 "\t" $2}' > stomach.regulatory.elements.starts.tsv
Ê
# Count the number of stomach regulatory regions
wc -l stomach.regulatory.elements.starts.tsv
# 835
Ê
Ê

# QUESTION 4
# 5.4- Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3'). Use the command below as a starting point:
Ê
awk 'BEGIN{FS=OFS="\t"} $1=="chr1"{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' ../ATAC-seq/annotation/gencode.v24.protein.coding.gene.body.bed > gene.starts.tsv
Ê
Ê

# QUESTION 5
# 5.5- Task 5: Download or copy this python script inside the epigenomics_uvic/bin folder. 
Ê
# Download the script:
wget -P ../bin "https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/get.distance.py"
Ê
# Have a look at the help page of this script to understand how it works:
python ../bin/get.distance.py -h
Ê
# Modify the script:
#!/usr/bin/env python
Ê
#************
# LIBRARIES *
#************
Ê
import sys
from optparse import OptionParser
Ê
#*****************
# OPTION PARSING *
#*****************
Ê
parser = OptionParser()
parser.add_option("-i", "--input", dest="input")
parser.add_option("-s", "--start", dest="start")
options, args = parser.parse_args()
Ê
open_input = open(options.input)
enhancer_start = int(options.start)
Ê
#********
# BEGIN *
#********
Ê
x = 1000000 # set maximum distance to 1 Mb
selected_gene = "" # initialize the gene as empty
selected_gene_start = 0 # initialize the start coordinate of the gene as empty
Ê
for line in open_input.readlines(): # for each line in the input file
ÊÊÊÊÊÊÊÊÊÊÊ gene, gene_start = line.strip().split('\t') # split the line into two columns based on a tab
ÊÊÊÊÊÊÊÊÊÊÊ gene_start = int(gene_start) # define a variable called position that correspond to the integer of the start of the gene
ÊÊÊÊÊÊÊÊÊÊÊ distance = abs(gene_start - enhancer_start) # compute the absolute value of the difference between position and enhancer_start
Ê
ÊÊÊÊÊÊÊÊÊÊÊ if distance < x: # if this absolute value is lower than x
ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ x = distance # this value will now be your current x
ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ selected_gene = gene # save gene as selectedGene
ÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊÊ selected_gene_start = gene_start # save position as selectedGeneStart
Ê
print ("\t").join([selected_gene, str(selected_gene_start), str(x)]) # print the selected gene, the start of the gene and the distance of the regulatory element
Ê
# Check if the script works correctly:
python ../bin/get.distance.py --input gene.starts.tsv --start 980000
# ENSG00000187642.9ÊÊÊÊÊÊÊÊÊ 982093ÊÊÊÊÊÊÊÊÊÊ 2093
# That is the expected output, so the modified script works correctly.
Ê
Ê

# QUESTION 6
# 5.6- For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above. Use the command below as a starting point:
Ê
# Sigmoid colon
cat sigmoid_colon.regulatory.elements.starts.tsv | while read element start; do 
ÊÊ python ../bin/get.distance.py -i gene.starts.tsv --start "$start" 
done > sigmoid_colon.regulatoryElements.genes.distances.tsv
Ê
# Stomach
cat stomach.regulatory.elements.starts.tsv | while read element start; do 
ÊÊ python ../bin/get.distance.py -i gene.starts.tsv --start "$start" 
done > stomach.regulatoryElements.genes.distances.tsv
Ê
Ê

# QUESTION 7
# 5.7- Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv
Ê
mean_and_median() {
Ê echo "$(Rscript -e "x <- read.table('$1', header = FALSE, sep='\t'); cat('Mean $tissue: ', mean(x[,3]), '\n')")"
Ê echo "$(Rscript -e "x <- read.table('$1', header = FALSE, sep='\t'); cat('Median $tissue: ', median(x[,3]), '\n')")"
}
Ê
for tissue in stomach sigmoid_colon; do
Ê mean_and_median "$tissue.regulatoryElements.genes.distances.tsv"
done
Ê
# Mean stomach:Ê 45987.7 
# Median stomach:Ê 25557 
# Mean sigmoid_colon:Ê 73635.89 
# Median sigmoid_colon:Ê 35802
